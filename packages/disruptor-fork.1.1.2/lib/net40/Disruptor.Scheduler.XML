<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Disruptor.Scheduler</name>
    </assembly>
    <members>
        <member name="T:Disruptor.Scheduler.RoundRobinThreadAffinedTaskScheduler">
            <summary>
            An implementation of <see cref="T:System.Threading.Tasks.TaskScheduler"/> which creates an underlying thread pool and set processor affinity to each thread.
            </summary>
        </member>
        <member name="M:Disruptor.Scheduler.RoundRobinThreadAffinedTaskScheduler.#ctor(System.Int32)">
            <summary>
            Create a new <see cref="T:Disruptor.Scheduler.RoundRobinThreadAffinedTaskScheduler"/> with a provided number of background threads. 
            Threads are pined to a logical core using a round robin algorithm.
            </summary>
            <param name="numberOfThreads">Total number of threads in the pool.</param>
        </member>
        <member name="M:Disruptor.Scheduler.RoundRobinThreadAffinedTaskScheduler.#ctor(System.Int32,System.Int32[])">
            <summary>
            Create a new <see cref="T:Disruptor.Scheduler.RoundRobinThreadAffinedTaskScheduler"/> with a provided number of background threads. 
            Threads are pined to a logical core using a round roubin algorithm choosen between provided processor indexes
            </summary>
            <param name="numberOfThreads">Total number of threads in the pool.</param>
            <param name="processorIndexes">One or more logical processor identifier(s) the threads are allowed to run on. 0-based indexes.</param>
        </member>
        <member name="M:Disruptor.Scheduler.RoundRobinThreadAffinedTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>
            Queues a <see cref="T:System.Threading.Tasks.Task"/> to the scheduler.
            </summary>
            <param name="task">The <see cref="T:System.Threading.Tasks.Task"/> to be queued.</param><exception cref="T:System.ArgumentNullException">The <paramref name="task"/> argument is null.</exception>
        </member>
        <member name="M:Disruptor.Scheduler.RoundRobinThreadAffinedTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Determines whether the provided <see cref="T:System.Threading.Tasks.Task"/> can be executed synchronously in this call, and if it can, executes it.
            </summary>
            <returns>
            A Boolean value indicating whether the task was executed inline.
            </returns>
            <param name="task">The <see cref="T:System.Threading.Tasks.Task"/> to be executed.</param><param name="taskWasPreviouslyQueued">A Boolean denoting whether or not task has previously been queued. If this parameter is True, then the task may have been previously queued (scheduled); if False, then the task is known not to have been queued, and this call is being made in order to execute the task inline without queuing it.</param><exception cref="T:System.ArgumentNullException">The <paramref name="task"/> argument is null.</exception><exception cref="T:System.InvalidOperationException">The <paramref name="task"/> was already executed.</exception>
        </member>
        <member name="M:Disruptor.Scheduler.RoundRobinThreadAffinedTaskScheduler.GetScheduledTasks">
            <summary>
            Generates an enumerable of <see cref="T:System.Threading.Tasks.Task"/> instances currently queued to the scheduler waiting to be executed.
            </summary>
            <returns>
            An enumerable that allows traversal of tasks currently queued to this scheduler.
            </returns>
            <exception cref="T:System.NotSupportedException">This scheduler is unable to generate a list of queued tasks at this time.</exception>
        </member>
        <member name="M:Disruptor.Scheduler.RoundRobinThreadAffinedTaskScheduler.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Disruptor.Scheduler.RoundRobinThreadAffinedTaskScheduler.MaximumConcurrencyLevel">
            <summary>
            Indicates the maximum concurrency level this <see cref="T:System.Threading.Tasks.TaskScheduler"/> is able to support.
            </summary>
            <returns>
            Returns an integer that represents the maximum concurrency level.
            </returns>
        </member>
    </members>
</doc>
