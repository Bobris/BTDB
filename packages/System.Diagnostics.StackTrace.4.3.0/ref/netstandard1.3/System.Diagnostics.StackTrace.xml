<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Diagnostics.StackTrace</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.StackFrame">
      <summary>Provides information about a <see cref="T:System.Diagnostics.StackFrame" />, which represents a function call on the call stack for the current thread.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileColumnNumber">
      <summary>Gets the column number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.</summary>
      <returns>The file column number, or 0 (zero) if the file column number cannot be determined.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileLineNumber">
      <summary>Gets the line number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.</summary>
      <returns>The file line number, or 0 (zero) if the file line number cannot be determined.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileName">
      <summary>Gets the file name that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.</summary>
      <returns>The file name, or null if the file name cannot be determined.</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetILOffset">
      <summary>Gets the offset from the start of the Microsoft intermediate language (MSIL) code for the method that is executing. This offset might be an approximation depending on whether or not the just-in-time (JIT) compiler is generating debugging code. The generation of this debugging information is controlled by the <see cref="T:System.Diagnostics.DebuggableAttribute" />.</summary>
      <returns>The offset from the start of the MSIL code for the method that is executing.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetMethod">
      <summary>Gets the method in which the frame is executing.</summary>
      <returns>The method in which the frame is executing.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.StackFrame.OFFSET_UNKNOWN">
      <summary>Defines the value that is returned from the <see cref="M:System.Diagnostics.StackFrame.GetNativeOffset" /> or <see cref="M:System.Diagnostics.StackFrame.GetILOffset" /> method when the native or Microsoft intermediate language (MSIL) offset is unknown. This field is constant.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.StackFrame.ToString">
      <summary>Builds a readable representation of the stack trace.</summary>
      <returns>A readable representation of the stack trace.</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.Diagnostics.StackFrameExtensions"></member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeImageBase(System.Diagnostics.StackFrame)"></member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeIP(System.Diagnostics.StackFrame)"></member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasILOffset(System.Diagnostics.StackFrame)"></member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasMethod(System.Diagnostics.StackFrame)"></member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasNativeImage(System.Diagnostics.StackFrame)"></member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasSource(System.Diagnostics.StackFrame)"></member>
    <member name="T:System.Diagnostics.StackTrace">
      <summary>Represents a stack trace, which is an ordered collection of one or more stack frames.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.StackTrace" /> class, using the provided exception object and optionally capturing source information.</summary>
      <exception cref="T:System.ArgumentNullException">The parameter <paramref name="e" /> is null. </exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrames">
      <summary>Returns a copy of all stack frames in the current stack trace.</summary>
      <returns>An array of type <see cref="T:System.Diagnostics.StackFrame" /> representing the function calls in the stack trace.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.StackTrace.ToString">
      <summary>Builds a readable representation of the stack trace.</summary>
      <returns>A readable representation of the stack trace.</returns>
      <filterpriority>2</filterpriority>
    </member>
  </members>
</doc>