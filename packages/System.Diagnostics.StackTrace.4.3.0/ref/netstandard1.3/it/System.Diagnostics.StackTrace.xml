<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Diagnostics.StackTrace</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.StackFrame">
      <summary>Fornisce informazioni su un oggetto <see cref="T:System.Diagnostics.StackFrame" /> che rappresenta una chiamata a una funzione sullo stack di chiamate per il thread corrente.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileColumnNumber">
      <summary>Ottiene il numero della colonna nel file che contiene il codice in esecuzione.Le informazioni vengono generalmente estratte dai simboli di debug relativi al file eseguibile.</summary>
      <returns>Numero di colonna del file oppure 0 (zero) se non è possibile determinare il numero di colonna del file.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileLineNumber">
      <summary>Ottiene il numero della riga nel file che contiene il codice in esecuzione.Le informazioni vengono generalmente estratte dai simboli di debug relativi al file eseguibile.</summary>
      <returns>Numero di riga del file oppure 0 (zero) se non è possibile determinare il numero di riga del file.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileName">
      <summary>Ottiene il nome del file che contiene il codice in esecuzione.Le informazioni vengono generalmente estratte dai simboli di debug relativi al file eseguibile.</summary>
      <returns>Nome del file oppure null se non è possibile determinare il nome del file.</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetILOffset">
      <summary>Ottiene l'offset dall'inizio del codice MSIL (Microsoft Intermediate Language) per il metodo in esecuzione.Tale offset può essere approssimativo, in base al fatto che il compilatore JIT stia generando o meno un codice di debug.La generazione di queste informazioni di debug è controllata dall'elemento <see cref="T:System.Diagnostics.DebuggableAttribute" />.</summary>
      <returns>Offset dall'inizio del codice MSIL per il metodo in esecuzione.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetMethod">
      <summary>Ottiene il metodo in cui è in esecuzione il frame.</summary>
      <returns>Metodo in cui è in esecuzione il frame.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.StackFrame.OFFSET_UNKNOWN">
      <summary>Definisce il valore restituito dal metodo <see cref="M:System.Diagnostics.StackFrame.GetNativeOffset" /> o dal metodo <see cref="M:System.Diagnostics.StackFrame.GetILOffset" /> quando l'offset nativo o MSIL (Microsoft Intermediate Language) è sconosciuto.Questo campo è costante.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Diagnostics.StackFrame.ToString">
      <summary>Compila una rappresentazione leggibile dell'analisi dello stack.</summary>
      <returns>Rappresentazione leggibile dell'analisi dello stack.</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.Diagnostics.StackFrameExtensions"></member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeImageBase(System.Diagnostics.StackFrame)"></member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeIP(System.Diagnostics.StackFrame)"></member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasILOffset(System.Diagnostics.StackFrame)"></member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasMethod(System.Diagnostics.StackFrame)"></member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasNativeImage(System.Diagnostics.StackFrame)"></member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasSource(System.Diagnostics.StackFrame)"></member>
    <member name="T:System.Diagnostics.StackTrace">
      <summary>Rappresenta un'analisi dello stack, vale a dire una raccolta ordinata di uno o più stack frame.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.StackTrace" />, utilizzando l'oggetto eccezione fornito e facoltativamente acquisendo informazioni sull'origine.</summary>
      <exception cref="T:System.ArgumentNullException">Il parametro <paramref name="e" /> è null. </exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrames">
      <summary>Restituisce una copia di tutti gli stack frame nella traccia corrente dello stack.</summary>
      <returns>Matrice di tipo <see cref="T:System.Diagnostics.StackFrame" /> che rappresenta le chiamate di funzioni nella traccia dello stack.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.StackTrace.ToString">
      <summary>Compila una rappresentazione leggibile dell'analisi dello stack.</summary>
      <returns>Rappresentazione leggibile dell'analisi dello stack.</returns>
      <filterpriority>2</filterpriority>
    </member>
  </members>
</doc>