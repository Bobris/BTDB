//HintName: BTDB.GenerateForAttribute.g.cs
// <auto-generated/>
#pragma warning disable 618
using System;
using System.Runtime.CompilerServices;

namespace BTDB;

static file class GenerateForAttributeRegistration
{
    static object Creator()
    {
        return RuntimeHelpers.GetUninitializedObject(typeof(global::BTDB.GenerateForAttribute));
    }
    [UnsafeAccessor(UnsafeAccessorKind.Method, Name = "get_ConstructorParameters")]
    extern static global::System.Type[] Getter1(global::BTDB.GenerateForAttribute @this);
    static object GenGetter1(object @this)
    {
        return Getter1(Unsafe.As<global::BTDB.GenerateForAttribute>(@this));
    }
    [UnsafeAccessor(UnsafeAccessorKind.Method, Name = "set_ConstructorParameters")]
    extern static void Setter1(global::BTDB.GenerateForAttribute @this, global::System.Type[] value);
    static void GenSetter1(object @this, object value)
    {
        Setter1(Unsafe.As<global::BTDB.GenerateForAttribute>(@this), Unsafe.As<global::System.Type[]>(value));
    }
    [ModuleInitializer]
    internal static unsafe void Register4BTDB()
    {
        global::BTDB.IOC.IContainer.RegisterFactory(typeof(global::BTDB.GenerateForAttribute), (container, ctx) =>
        {
            var f0 = container.CreateFactory(ctx, typeof(global::System.Type), "type");
            if (f0 == null) throw new global::System.ArgumentException("Cannot resolve System.Type type parameter of BTDB.GenerateForAttribute");
            return (container2, ctx2) =>
            {
                var res = new global::BTDB.GenerateForAttribute(Unsafe.As<global::System.Type>(f0(container2, ctx2)));
                return res;
            };
        });
        var metadata = new global::BTDB.Serialization.ClassMetadata();
        metadata.Name = "GenerateForAttribute";
        metadata.Type = typeof(global::BTDB.GenerateForAttribute);
        metadata.Namespace = "BTDB";
        metadata.Implements = [];
        metadata.Creator = &Creator;
        var dummy = Unsafe.As<global::BTDB.GenerateForAttribute>(metadata);
        metadata.Fields = new[]
        {
            new global::BTDB.Serialization.FieldMetadata
            {
                Name = "ConstructorParameters",
                Type = typeof(global::System.Type[]),
                PropObjGetter = &GenGetter1,
                PropObjSetter = &GenSetter1,
            },
        };
        global::BTDB.Serialization.ReflectionMetadata.Register(metadata);
    }
}
