//HintName: TestNamespace.IDispatcher.g.cs
// <auto-generated/>
#nullable enable
using System;
using System.Runtime.CompilerServices;

namespace TestNamespace;

public partial interface IDispatcher
{
    public static readonly BTDB.Collections.RefDictionary<nint, BTDB.IOC.DispatcherItem> ConsumeHandlers = new();

    public static unsafe partial delegate*<BTDB.IOC.IContainer, object, object?> CreateConsumeDispatcher(BTDB.IOC.IContainer container)
    {
        foreach(var idx in ConsumeHandlers.Index)
        {
            ConsumeHandlers.ValueRef(idx).Execute = ConsumeHandlers.ValueRef(idx).ExecuteFactory(container);
        }
        static object? Consume(BTDB.IOC.IContainer container, object message)
        {
            if (ConsumeHandlers.TryGetValue(message.GetType().TypeHandle.Value, out var handler))
            {
                return Unsafe.As<object>(handler.Execute!(container, message));
            }
            throw new InvalidOperationException($"No handler for message {message.GetType().FullName}");
        }

        return &Consume;
    }
}
