//HintName: TestNamespace.Person.g.cs
// <auto-generated/>
using System;
using System.Runtime.CompilerServices;

namespace TestNamespace;

static file class PersonRegistration
{
    [UnsafeAccessor(UnsafeAccessorKind.Constructor)]
    extern static global::TestNamespace.Person Creator();
    [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "Age")]
    extern static ref int Field1(global::TestNamespace.Person @this);
    [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Name>k__BackingField")]
    extern static ref string Field2(global::TestNamespace.Person @this);
    [ModuleInitializer]
    internal static unsafe void Register4BTDB()
    {
        BTDB.IOC.IContainer.RegisterFactory(typeof(global::TestNamespace.Person), (container, ctx) =>
        {
            return (container2, ctx2) =>
            {
                var res = new global::TestNamespace.Person();
                return res;
            };
        });
        var metadata = new BTDB.Serialization.ClassMetadata();
        metadata.Name = "Person";
        metadata.Type = typeof(global::TestNamespace.Person);
        metadata.Namespace = "TestNamespace";
        metadata.Creator = &Creator;
        var dummy = Unsafe.As<global::TestNamespace.Person>(metadata);
        metadata.Fields = new[]
        {
            new BTDB.Serialization.FieldMetadata
            {
                Name = "Age",
                Type = typeof(int),
                ByteOffset = BTDB.Serialization.RawData.CalcOffset(dummy, ref Field1(dummy)),
            },
            new BTDB.Serialization.FieldMetadata
            {
                Name = "Name",
                Type = typeof(string),
                ByteOffset = BTDB.Serialization.RawData.CalcOffset(dummy, ref Field2(dummy)),
            },
        };
        BTDB.Serialization.ReflectionMetadata.Register(metadata);
    }
}
